/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { CheckOwnerOfNft, Status, CheckProposalStatus, ExecuteMsg, Balance, Uint128, NativeBalance, Addr, HasBalanceGte, Coin, Cw20CoinVerified, InstantiateMsg, ProposalStatus, Rule, ValueIndex, Binary, ValueOrdering, QueryConstruct, GenericQuery, QueryMsg, QueryMultiResponse, RuleResponse } from "./CwRules.types";
import { CwRulesQueryClient, CwRulesClient } from "./CwRules.client";
export const cwRulesQueryKeys = {
  contract: ([{
    contract: "cwRules"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cwRulesQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getBalance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "get_balance",
    args
  }] as const),
  getCw20Balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "get_cw20_balance",
    args
  }] as const),
  hasBalanceGte: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "has_balance_gte",
    args
  }] as const),
  checkOwnerOfNft: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "check_owner_of_nft",
    args
  }] as const),
  checkProposalStatus: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "check_proposal_status",
    args
  }] as const),
  genericQuery: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "generic_query",
    args
  }] as const),
  queryConstruct: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwRulesQueryKeys.address(contractAddress)[0],
    method: "query_construct",
    args
  }] as const)
};
export interface CwRulesReactQuery<TResponse, TData = TResponse> {
  client: CwRulesQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwRulesQueryConstructQuery<TData> extends CwRulesReactQuery<QueryConstructResponse, TData> {}
export function useCwRulesQueryConstructQuery<TData = QueryConstructResponse>({
  client,
  options
}: CwRulesQueryConstructQuery<TData>) {
  return useQuery<QueryConstructResponse, Error, TData>(cwRulesQueryKeys.queryConstruct(client?.contractAddress), () => client ? client.queryConstruct() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesGenericQueryQuery<TData> extends CwRulesReactQuery<GenericQueryResponse, TData> {}
export function useCwRulesGenericQueryQuery<TData = GenericQueryResponse>({
  client,
  options
}: CwRulesGenericQueryQuery<TData>) {
  return useQuery<GenericQueryResponse, Error, TData>(cwRulesQueryKeys.genericQuery(client?.contractAddress), () => client ? client.genericQuery() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesCheckProposalStatusQuery<TData> extends CwRulesReactQuery<CheckProposalStatusResponse, TData> {}
export function useCwRulesCheckProposalStatusQuery<TData = CheckProposalStatusResponse>({
  client,
  options
}: CwRulesCheckProposalStatusQuery<TData>) {
  return useQuery<CheckProposalStatusResponse, Error, TData>(cwRulesQueryKeys.checkProposalStatus(client?.contractAddress), () => client ? client.checkProposalStatus() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesCheckOwnerOfNftQuery<TData> extends CwRulesReactQuery<CheckOwnerOfNftResponse, TData> {}
export function useCwRulesCheckOwnerOfNftQuery<TData = CheckOwnerOfNftResponse>({
  client,
  options
}: CwRulesCheckOwnerOfNftQuery<TData>) {
  return useQuery<CheckOwnerOfNftResponse, Error, TData>(cwRulesQueryKeys.checkOwnerOfNft(client?.contractAddress), () => client ? client.checkOwnerOfNft() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesHasBalanceGteQuery<TData> extends CwRulesReactQuery<HasBalanceGteResponse, TData> {}
export function useCwRulesHasBalanceGteQuery<TData = HasBalanceGteResponse>({
  client,
  options
}: CwRulesHasBalanceGteQuery<TData>) {
  return useQuery<HasBalanceGteResponse, Error, TData>(cwRulesQueryKeys.hasBalanceGte(client?.contractAddress), () => client ? client.hasBalanceGte() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesGetCw20BalanceQuery<TData> extends CwRulesReactQuery<GetCw20BalanceResponse, TData> {
  args: {
    address: string;
    cw20Contract: string;
  };
}
export function useCwRulesGetCw20BalanceQuery<TData = GetCw20BalanceResponse>({
  client,
  args,
  options
}: CwRulesGetCw20BalanceQuery<TData>) {
  return useQuery<GetCw20BalanceResponse, Error, TData>(cwRulesQueryKeys.getCw20Balance(client?.contractAddress, args), () => client ? client.getCw20Balance({
    address: args.address,
    cw20Contract: args.cw20Contract
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesGetBalanceQuery<TData> extends CwRulesReactQuery<GetBalanceResponse, TData> {
  args: {
    address: string;
    denom: string;
  };
}
export function useCwRulesGetBalanceQuery<TData = GetBalanceResponse>({
  client,
  args,
  options
}: CwRulesGetBalanceQuery<TData>) {
  return useQuery<GetBalanceResponse, Error, TData>(cwRulesQueryKeys.getBalance(client?.contractAddress, args), () => client ? client.getBalance({
    address: args.address,
    denom: args.denom
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwRulesQueryResultMutation {
  client: CwRulesClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwRulesQueryResultMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwRulesQueryResultMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwRulesQueryResultMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.queryResult(fee, memo, funds), options);
}