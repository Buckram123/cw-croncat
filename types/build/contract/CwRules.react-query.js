"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCwRulesQueryResultMutation = exports.useCwRulesGetBalanceQuery = exports.useCwRulesGetCw20BalanceQuery = exports.useCwRulesHasBalanceGteQuery = exports.useCwRulesCheckOwnerOfNftQuery = exports.useCwRulesCheckProposalStatusQuery = exports.useCwRulesGenericQueryQuery = exports.useCwRulesQueryConstructQuery = exports.cwRulesQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.cwRulesQueryKeys = {
    contract: [{
            contract: "cwRules"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.contract[0]), { address: contractAddress })],
    getBalance: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "get_balance", args })],
    getCw20Balance: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "get_cw20_balance", args })],
    hasBalanceGte: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "has_balance_gte", args })],
    checkOwnerOfNft: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "check_owner_of_nft", args })],
    checkProposalStatus: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "check_proposal_status", args })],
    genericQuery: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "generic_query", args })],
    queryConstruct: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cwRulesQueryKeys.address(contractAddress)[0]), { method: "query_construct", args })]
};
function useCwRulesQueryConstructQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.queryConstruct(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.queryConstruct() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesQueryConstructQuery = useCwRulesQueryConstructQuery;
function useCwRulesGenericQueryQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.genericQuery(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.genericQuery() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesGenericQueryQuery = useCwRulesGenericQueryQuery;
function useCwRulesCheckProposalStatusQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.checkProposalStatus(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.checkProposalStatus() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesCheckProposalStatusQuery = useCwRulesCheckProposalStatusQuery;
function useCwRulesCheckOwnerOfNftQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.checkOwnerOfNft(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.checkOwnerOfNft() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesCheckOwnerOfNftQuery = useCwRulesCheckOwnerOfNftQuery;
function useCwRulesHasBalanceGteQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.hasBalanceGte(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.hasBalanceGte() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesHasBalanceGteQuery = useCwRulesHasBalanceGteQuery;
function useCwRulesGetCw20BalanceQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.getCw20Balance(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.getCw20Balance({
        address: args.address,
        cw20Contract: args.cw20Contract
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesGetCw20BalanceQuery = useCwRulesGetCw20BalanceQuery;
function useCwRulesGetBalanceQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.cwRulesQueryKeys.getBalance(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.getBalance({
        address: args.address,
        denom: args.denom
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCwRulesGetBalanceQuery = useCwRulesGetBalanceQuery;
function useCwRulesQueryResultMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.queryResult(fee, memo, funds), options);
}
exports.useCwRulesQueryResultMutation = useCwRulesQueryResultMutation;
