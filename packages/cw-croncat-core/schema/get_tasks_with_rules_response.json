{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetTasksWithRulesResponse",
  "type": "array",
  "items": {
    "$ref": "#/definitions/TaskWithRulesResponse"
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Boundary": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Height"
          ],
          "properties": {
            "Height": {
              "type": "object",
              "properties": {
                "end": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "start": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Time"
          ],
          "properties": {
            "Time": {
              "type": "object",
              "properties": {
                "end": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Timestamp"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "start": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Timestamp"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Interval": {
      "description": "Defines the spacing of execution NOTE:S - Block Height Based: Once, Immediate, Block - Timestamp Based: Cron - No Epoch support directly, advised to use block heights instead",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Once",
            "Immediate"
          ]
        },
        {
          "description": "Allows timing based on block intervals rather than timestamps",
          "type": "object",
          "required": [
            "Block"
          ],
          "properties": {
            "Block": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Crontab Spec String",
          "type": "object",
          "required": [
            "Cron"
          ],
          "properties": {
            "Cron": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Rule": {
      "type": "object",
      "required": [
        "contract_addr",
        "msg"
      ],
      "properties": {
        "contract_addr": {
          "description": "TBD: Interchain query support (See ibc::IbcMsg) Account to direct all view calls against",
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "TaskWithRulesResponse": {
      "type": "object",
      "required": [
        "interval",
        "task_hash"
      ],
      "properties": {
        "boundary": {
          "anyOf": [
            {
              "$ref": "#/definitions/Boundary"
            },
            {
              "type": "null"
            }
          ]
        },
        "interval": {
          "$ref": "#/definitions/Interval"
        },
        "rules": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "task_hash": {
          "type": "string"
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
